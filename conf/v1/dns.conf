location = /v1/dns/ptr {
    default_type text/plain;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr = require("geojs.utils").get_ptr
        -- Vars
        local record
        -- Get the IP we want
        local args = ngx.req.get_uri_args()
        if args.ip then
            record = args.ip
        else
            record = ngx.var.remote_addr
        end
        local ptr = getptr(record)
        ngx.say(ptr)
    }
}

location ~ "/v1/dns/ptr/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$" {
    default_type text/plain;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr   = require("geojs.utils").get_ptr
        local ngx_vars = ngx.var

        -- Vars
        local record

        -- Get the IP we want
        record = ngx_vars.ip

        local ptr = getptr(record)
        ngx.say(ptr)

    }
}

location = /v1/dns/ptr.json {
    default_type application/json;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr      = require("geojs.utils").get_ptr
        local cjson       = require("cjson")
        local cjson       = require("cjson")
        local json_encode = cjson.encode

        -- Vars!
        local record
        -- Get the IP we want
        local args = ngx.req.get_uri_args()
        if args.ip then
            record = args.ip
        else
            record = ngx.var.remote_addr
        end
        local ptr = getptr(record)
        ngx.say(
            json_encode({
                ["ptr"] = ptr
            })
        )
    }
}

location ~ "/v1/dns/ptr/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))\.json$" {
    default_type application/json;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr      = require("geojs.utils").get_ptr
        local ngx_vars    = ngx.var
        local cjson       = require("cjson")
        local json_encode = cjson.encode

        -- Vars!
        local record

        -- Get the IP we want
        record = ngx_vars.ip

        local ptr = getptr(record)

        ngx.say(
            json_encode({
                ["ptr"] = ptr
            })
        )
    }
}

location = /v1/dns/ptr.js {
    default_type application/javascript;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr       = require("geojs.utils").get_ptr
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Vars!
        local record, callback

        -- Get the IP we want
        local args = ngx.req.get_uri_args()
        if args.ip then
            record = args.ip
        else
            record = ngx.var.remote_addr
        end

        -- Override our callback if it exists
        callback = get_callback('ptr', args)

        local ptr = getptr(record)
        ngx.say(
            callback,
            '(',
            json_encode({
                ["ptr"] = ptr
            }),
            ')'
        )
    }
}

location ~ "/v1/dns/ptr/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))\.js$" {
    default_type application/javascript;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr       = require("geojs.utils").get_ptr
        local get_callback = require("geojs.utils").generate_callback
        local ngx_vars     = ngx.var
        local args         = ngx.req.get_uri_args()
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Vars!
        local record
        local callback

        -- Get the IP we want
        record = ngx_vars.ip

        -- Override our callback if it exists
        callback = get_callback('ptr', args)

        local ptr = getptr(record)
        ngx.say(
            callback,
            '(',
            cjson.encode({
                ["ptr"] = ptr
            }),
            ')'
        )
    }
}
