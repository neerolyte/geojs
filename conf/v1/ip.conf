location = /v1/ip {
    default_type text/plain;
    content_by_lua_block {
        ngx.say(ngx.var.remote_addr)
    }
}

location = /v1/ip.json {
    default_type application/json;
    content_by_lua_block {
        local cjson = require("cjson")
        ngx.say(cjson.encode({ip = ngx.var.remote_addr}))
    }
}

location = /v1/ip.js {
    default_type application/javascript;
    content_by_lua_block {
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        -- Get callback
        local args = ngx.req.get_uri_args()
        local callback = get_callback('geoip', args)

        ngx.say(callback, '(', json_encode({ip = ngx.var.remote_addr}), ')')
    }
}

location = /v1/ip/country {
    default_type text/plain;
    content_by_lua_block {
        local args   = ngx.req.get_uri_args()
        local split  = require("geojs.utils").split
        local lookup = require("geojs.utils").country_lookup

        if args.ip then
            local ips  = {}
            local msg  = ""
            local info = ""
            --- Put our IPs into a table
            ips = split(args.ip, ',')
            for k,v in ipairs(ips) do
                -- Get our info from upstream
                info = lookup(v)
                -- Add our new info to our msg
                msg = msg .. v .. ': ' .. info["country"] .. '\n'
            end
            ngx.print(msg)
        else
            local info = lookup(ngx.var.remote_addr)
            ngx.say(info["country"])
        end
    }
}

location ~ "/v1/ip/country/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$" {
    default_type text/plain;
    content_by_lua_block {
        local ngx_var = ngx.var
        local lookup  = require("geojs.utils").country_lookup

        local info = lookup(ngx_var.ip)
        ngx.say(info["country"])
    }
}

location = /v1/ip/country/full {
    default_type text/plain;
    content_by_lua_block {
        local args   = ngx.req.get_uri_args()
        local split  = require("geojs.utils").split
        local lookup = require("geojs.utils").country_lookup

        if args.ip then
            local ips  = {}
            local msg  = ""
            local info = ""
            --- Put our IPs into a table
            ips = split(args.ip, ',')
            for k,v in ipairs(ips) do
                -- Get our info from upstream
                info = lookup(v)
                -- Add our new info to our msg
                msg = msg .. v .. ': ' .. info["name"] .. '\n'
            end
            ngx.print(msg)
        else
            local info = lookup(ngx.var.remote_addr)
            ngx.say(info["name"])
        end
    }
}

location ~ "/v1/ip/country/full/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$" {
    default_type text/plain;
    content_by_lua_block {
        local ngx_var = ngx.var
        local lookup  = require("geojs.utils").country_lookup

        local info = lookup(ngx_var.ip)
        ngx.say(info["name"])
    }
}

location = /v1/ip/country.json {
    default_type application/json;
    content_by_lua_block {
        local args        = ngx.req.get_uri_args()
        local ngx_var     = ngx.var
        local split       = require("geojs.utils").split
        local lookup      = require("geojs.utils").country_lookup
        local cjson       = require("cjson")
        local json_encode = cjson.encode

        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ',')
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                -- Get our info form upstream
                info = lookup(v)
                -- Add our new info to our msg table
                table.insert(msg, info)
            end
            ngx.say(json_encode(msg))
        else
            -- Set our req IP
            local info = lookup(ngx_var.remote_addr)
            ngx.say(json_encode(info))
        end
    }
}

location ~ "/v1/ip/country/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))\.json$" {
    default_type application/json;
    content_by_lua_block {
        local ngx_var     = ngx.var
        local lookup      = require("geojs.utils").country_lookup
        local cjson       = require("cjson")
        local json_encode = cjson.encode

            -- Set our req IP
            local info = lookup(ngx_var.ip)
            ngx.say(json_encode(info))
        end
    }
}

location = /v1/ip/country.js {
    default_type application/javascript;
    content_by_lua_block {
        local args         = ngx.req.get_uri_args()
        local ngx_var      = ngx.var
        local split        = require("geojs.utils").split
        local get_callback = require("geojs.utils").generate_callback
        local lookup       = require("geojs.utils").country_lookup
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Get our custom callback is it exists
        local callback = get_callback('countryip', args)

        -- If we have IP args, lets use those
        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ",")
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                -- Get our info from upstream
                info = lookup(v)
                -- Add our new info to our msg table
                table.insert(msg, info)
            end
            ngx.say(
                callback,
                "(",
                json_encode(msg),
                ")"
            )
        else
            -- Since we don't have an IP arg we're assuming we've just got a single IP
            local req_ip = ngx.var.remote_addr
            local info   = lookup(req_ip)
            ngx.say(
                callback,
                '(',
                json_encode(info),
                ')'
            )
        end
    }
}

location ~ "/v1/ip/country/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))\.js$" {
    default_type application/javascript;
    content_by_lua_block {
        local args         = ngx.req.get_uri_args()
        local ngx_var      = ngx.var
        local get_callback = require("geojs.utils").generate_callback
        local lookup       = require("geojs.utils").country_lookup
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Get our custom callback is it exists
        local callback = get_callback('countryip', args)

        local info = lookup(ngx_var.ip)
        ngx.say(
            callback,
            '(',
            json_encode(info),
            ')'
        )
    }
}

location = /v1/ip/geo.json {
    default_type application/json;
    content_by_lua_block {
        local args        = ngx.req.get_uri_args()
        local ngx_var     = ngx.var
        local split       = require("geojs.utils").split
        local lookup      = require("geojs.utils").geo_lookup
        local cjson       = require("cjson")
        local json_encode = cjson.encode

        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ',')
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                -- Get our info form upstream
                info = lookup(v)
                -- Add our new info to our msg table
                table.insert(msg, info)
            end
            ngx.say(json_encode(msg))
        else
            -- Set our req IP
            local req_ip = ngx.var.remote_addr
            local info   = lookup(req_ip)
            ngx.say(json_encode(info))
        end
    }
}

location ~ "/v1/ip/geo/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))\.json$" {
    default_type application/json;
    content_by_lua_block {
        local ngx_var     = ngx.var
        local lookup      = require("geojs.utils").geo_lookup
        local cjson       = require("cjson")
        local json_encode = cjson.encode

        -- Set our req IP
        local info = lookup(ngx_var.ip)
        ngx.say(json_encode(info))
    }
}

location = /v1/ip/geo.js {
    default_type application/javascript;
    content_by_lua_block {
        local args         = ngx.req.get_uri_args()
        local ngx_var      = ngx.var
        local split        = require("geojs.utils").split
        local lookup       = require("geojs.utils").geo_lookup
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Get our custom callback if we've got one
        local callback = get_callback('geoip', args)

        -- If we have IPs in args loop through them
        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ",")
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                info = lookup(v)
                -- Add our new info to our msg table
                table.insert(msg, info)
            end
            -- Send our response back!
            ngx.say(
                callback,
                "(",
                json_encode(msg),
                ")"
            )
        else
            -- Since we don't have an IP arg we're assuming we've just got a single IP
            local req_ip = ngx.var.remote_addr
            local info   = lookup(req_ip)
            ngx.say(
                callback,
                '(',
                json_encode(info),
                ')'
            )
        end
    }
}

location ~ "/v1/ip/geo/(?<ip>((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])))\.js$" {
    default_type application/javascript;
    content_by_lua_block {
        local args         = ngx.req.get_uri_args()
        local ngx_var      = ngx.var
        local lookup       = require("geojs.utils").geo_lookup
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Get our custom callback if we've got one
        local callback = get_callback('geoip', args)

        local info = lookup(ngx_var.ip)
        ngx.say(
            callback,
            '(',
            json_encode(info),
            ')'
        )
    }
}
